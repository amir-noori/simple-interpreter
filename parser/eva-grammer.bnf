
/**
 * S-expression Parser.
 *
 * Atom: 42, "hello", foo
 *
 * List: (), (+ 5 x), (print "hello") 
*/



// Lexical Grammer (tokens):

%lex

%%

\s+     /* skip whitespace */ 

"[^\"]*"    return 'STRING'

\d+         return 'NUMBER'

[\w\-+*=<>/]+         return 'SYMBOL'

/lex

// Syntactic Grammer (BNF)

%%

Exp
    : Atom
    | List
    ;

Atom
    : NUMBER { $$ = Number($1) }
    | STRING
    | SYMBOL
    ;

List
    : '(' ListEntries ')' { $$ = $2 }
    ;

ListEntries
    : ListEntries Exp { $1.push($2); $$ = $1 }
    | /* empty */ { $$ = [] }
    ;